import sys
import os
import streamlit as st
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(BASE_DIR)

from ml_model.ml_test import CourseRecommender
from llm_model.llm_model_main import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
recommender = CourseRecommender()

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
tasks = PRODUCTION_TASKS

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üéì –†–µ—à–∏ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—É—Ä—Å–∞–º")

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2 = st.tabs(["üìò –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
mistake_messages = {}

with tab1:
    input_ml_model = [len(PRODUCTION_TASKS), 0, 0, 0, 0, 0]

    # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ—à–µ–Ω–∏–π
    user_solutions = []
    task_containers = []  # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    for task in tasks:
        container = st.container()  # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        with container:
            st.subheader(f"–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏ ‚Ññ{task['task_number']}")
            st.write(task["task_description"])
            solution = st.text_input(f"–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ‚Ññ{task['task_number']}", key=task["task_number"])
        user_solutions.append(solution)
        task_containers.append(container)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Å–ø–∏—Å–æ–∫

    if st.button("üéØ –û—Ç–æ—Å–ª–∞—Ç—å –∑–∞–¥–∞—á–∏"):
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ai = ChatWithAI()
        for i in range(len(user_solutions)):
            mistakes_in_number, input_ml_model = asyncio.run(ai.check_solution(i, user_solutions[i], input_ml_model))

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
            with task_containers[i]:
                if mistakes_in_number is None:
                    st.write("‚úÖ –¢—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–æ–∫ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.")
                elif mistakes_in_number:
                    st.write("‚ùå –¢—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫–∏:")
                    for mistake in mistakes_in_number:
                        st.write(f"- {mistake}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        recommended_courses = recommender.recommend_courses(input_ml_model)

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        st.write(f"–¢—ã —Ä–µ—à–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ {input_ml_model[1]} –∏–∑ {input_ml_model[0]} –∑–∞–¥–∞—á.")
        if recommended_courses:
            recommended_courses_list = list(recommended_courses)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ —Å–ø–∏—Å–æ–∫
            st.write("üìö –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:")
            for course in recommended_courses_list:
                st.write(f"- {course}")
        else:
            st.write("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

with tab2:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.metric(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á", value=input_ml_model[0])
    st.metric(label="–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å", value=f"{input_ml_model[1]} –∏–∑ {input_ml_model[0]}")
    st.write("–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á.")
